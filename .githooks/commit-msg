#!/bin/bash

# Updated regex for conventional commit messages to be more flexible
type_regex="(feat|fix|docs|style|refactor|test|chore|perf|ci|build|revert)"
scope_regex="(\\([a-zA-Z0-9_\\-]+\\))?"
subject_regex=": .{1,}"

# Regex that allows the type, optional scope, colon, and subject
conventional_commit_regex="^$type_regex$scope_regex$subject_regex$"

# Get the commit message from the file provided by Git
commit_message=$(cat "$1" | tr -d '\r' | sed 's/[[:space:]]*$//')

# Debug: Print the commit message
echo "DEBUG: Commit message is: '$commit_message'"

# Allow empty commit messages
if [[ -z "$commit_message" ]]; then
    echo "DEBUG: Commit message is empty. Allowing commit."
    exit 0
fi

# Check if the commit message follows the conventional commit format
if ! [[ "$commit_message" =~ $conventional_commit_regex ]]; then
    echo -e "\033[31mERROR: Invalid commit message format.\033[0m"
    echo "Commit message does not follow Conventional Commit guidelines."
    echo "Example formats:"
    echo "  feat(scope): add new login feature"
    echo "  fix: correct typo in documentation"
    echo "  chore(deps): update dependencies"
    exit 1
fi

# If the commit message is valid, allow the commit to proceed
exit 0